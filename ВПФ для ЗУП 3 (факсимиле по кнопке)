
#Область РегистрацияОбработки

// Формирует шаблон сведений о внешнем отчете или обработке для последующего заполнения.
//
// Параметры:
//   ВерсияБСП - Строка - Версия библиотеки стандартных подсистем, на которую рассчитывают механизмы внешнего объекта.
//       См. также СтандартныеПодсистемыСервер.ВерсияБиблиотеки().
//
// Возвращаемое значение:
//   ПараметрыРегистрации - Структура - Параметры внешнего объекта.
//       
//       * Вид - Строка - Вид внешнего объекта.
//           Для определения вида рекомендуется использовать функции
//           ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<ИмяВида>.
//           Также Вид можно указать явно:
//           ** "ПечатнаяФорма"
//           ** "ЗаполнениеОбъекта"
//           ** "СозданиеСвязанныхОбъектов"
//           ** "Отчет"
//           ** "ДополнительнаяОбработка"
//           ** "ДополнительныйОтчет"
//           ** "ШаблонСообщения".
//       
//       * Версия - Строка - Версия объекта.
//           Задается в формате: "<Старший номер>.<Младший номер>".
//       
//       * Назначение - Массив - Необязательный.
//           Объекты конфигурации, для которых предназначен этот объект.
//           ** Строка - Полное имя объекта метаданных.
//       
//       * Наименование - Строка - Необязательный. Представление для администратора (наименование элемента справочника).
//           Если не заполнено, то берется представление объекта метаданных внешнего объекта.
//       
//       * БезопасныйРежим - Булево - Необязательный. Признак подключения внешней обработки в безопасном режиме.
//           Значение по умолчанию Истина (обработка будет выполняться безопасно).
//           В безопасном режиме:
//             Игнорируется привилегированный режим.
//             Запрещены внешние по отношению к платформе 1С:Предприятия действия:
//               COM;
//               Загрузка внешних компонентов;
//               Запуск внешних приложений и команд операционной системы;
//               Доступ к файловой системе, кроме временных файлов;
//               Доступ к Интернету.
//       
//       * Разрешения - Массив - Необязательный.
//           Дополнительные разрешения, необходимые внешней обработке при работе в безопасном режиме.
//           ** ОбъектXDTO {http://www.1c.ru/1cFresh/ApplicationExtensions/Permissions/a.b.c.d}PermissionBase - Разрешение.
//               Для формирования описания разрешения рекомендуется использовать функции
//               РаботаВБезопасномРежиме.Разрешение<ВидРазрешения>(<ПараметрыРазрешения>).
//       
//       * Информация - Строка - Необязательный. Краткая информация по внешнему объекту.
//           В этом параметре для администратора рекомендуется указать описание возможностей внешнего объекта.
//           Если не заполнено, то берется комментарий объекта метаданных внешнего объекта.
//       
//       * ВерсияБСП - Строка - Необязательный. Версия библиотеки, на которую рассчитывают механизмы внешнего объекта.
//           Подробнее - см. СтандартныеПодсистемыСервер.ВерсияБиблиотеки().
//       
//       * ОпределитьНастройкиФормы - Булево - Необязательный.
//           Флажок тесной интеграции дополнительного отчета с общей формой отчета.
//           Позволяет переопределять некоторые настройки формы и подписываться на ее события.
//           Если Истина, тогда в модуле объекта отчета следует определить процедуру по шаблону:
//           
//           // Настройки общей формы отчета подсистемы "Варианты отчетов".
//           //
//           // Параметры:
//           //   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//           //       Неопределено когда вызов без контекста.
//           //   КлючВарианта - Строка, Неопределено - Имя предопределенного
//           //       или уникальный идентификатор пользовательского варианта отчета.
//           //       Неопределено когда вызов без контекста.
//           //   Настройки - Структура - см. возвращаемое значение
//           //       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//           //
//           Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//           	// Код процедуры.
//           КонецПроцедуры
//           
//           Внимание. Этот флажок работает только для дополнительных отчетов, подключенных к общей форме ФормаОтчета.
//           Подробнее см. в документации к подсистемам "Дополнительные отчеты и обработки" и "Варианты отчетов".
//       
//       * Команды - ТаблицаЗначений - Необязательный для отчетов. Настройки команд, поставляемых внешним объектом.
//           
//           ** Идентификатор - Строка - Внутреннее имя команды.
//               Для внешних печатных форм (когда Вид = "ПечатнаяФорма"):
//                 Идентификатор может содержать имена одной или нескольких команд печати,
//                 разделенных запятыми. Подробнее см. описание колонки Идентификатор
//                 в функции СоздатьКоллекциюКомандПечати() общего модуля УправлениеПечатью.
//           
//           ** Представление - Строка - Пользовательское представление команды.
//           
//           ** Использование - Строка - Тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>().
//               В комментариям к этим функциям также даны шаблоны процедур-обработчиков команд.
//           
//           ** ПоказыватьОповещение - Булево - если Истина, то при запуске команды выводится оповещение "Команда выполняется...".
//              Действует для всех типов команд, кроме команд по открытию формы (Использование = "ОткрытиеФормы").
//           
//           ** Модификатор - Строка - Дополнительная классификация команды.
//               Для внешних печатных форм (когда Вид = "ПечатнаяФорма"):
//                 *** "ПечатьMXL" - для печатных форм на основе табличных макетов.
//               Для загрузки данных из файла (когда Вид = "ПечатнаяФорма" и Использование = "ЗагрузкаДанныхИзФайла"):
//                 Модификатор является обязательным для заполнения
//                 и должен содержать полное имя объекта метаданных (справочника),
//                 для которого выполняется загрузка данных.
//           
//           ** Скрыть - Булево - Необязательный. Признак того, что это служебная команда.
//               Если установить в значение Истина, то команда скрывается в карточке дополнительного объекта.
//
Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("3.1.5.342");	//Версия БСП
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();

	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.СчетНаОплатуПокупателю");  // Указываем данные какого объекта будут использоватся для формирования ПД
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);

	ПараметрыРегистрации.Версия = "02.02.24";  // Указываем версию данной Внешней ПФ
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Спецификация"; // Указываем название документа в меню Печать
	НоваяКоманда.Идентификатор = "Спецификация";	//Указываем Идентификатор без пробелов
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина); //Получение разрешения на каталог временных файлов

	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);

	Возврат ПараметрыРегистрации;

		
КонецФункции

#КонецОбласти



Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами");
	ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);   
		
		
	Если НужноПечататьМакет(КоллекцияПечатныхФорм, "Спецификация") Тогда
			СформироватьПечатнуюФорму(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, "Спецификация", "Спецификация", ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	 
	
КонецПроцедуры  


Функция СформироватьПечатнуюФорму(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ОбъектыПечати, ПараметрыВывода)
    НомерДокумента = 0;   
	ТабличныйДокумент = Новый ТабличныйДокумент;

	Для каждого СсылкаНаДокумент Из МассивОбъектов Цикл
	    НомерДокумента = НомерДокумента + 1;
    	ОбъектыПечатиВрем = СкопироватьСписокЗначений(ОбъектыПечати);
		
	//Формирование табличного документа
		ТабличныйДокумент = ПечатьСчетаНаОплату(ТабличныйДокумент, СсылкаНаДокумент, ОбъектыПечатиВрем, ПараметрыПечати);
      	
		ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент,,);
		ОбъектыПечати.Добавить(СсылкаНаДокумент, "Документ_" + НомерДокумента);
		ПараметрыВывода.ЗаголовокФормы = "Спецификация";
		ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечатиВрем, ПараметрыВывода); // имя файла для сохранения можно задать тут
    КонецЦикла;
	//ПараметрыВывода.Вставить("ФормироватьЭД", Истина)
КонецФункции


Функция ПечатьСчетаНаОплату(ТабличныйДокумент, Ссылка, ОбъектыПечати, ПараметрыПечати) Экспорт

	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	ПервыйДокумент = Истина;
	НомерСтроки = 0;
	Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_СчетЗаказ1");
	
			
	ОбластьУсловия = Макет.ПолучитьОбласть("Условия");
	ТабличныйДокумент.Вывести(ОбластьУсловия);
		

	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		
		
	ОбластьПодвал  = Макет.ПолучитьОбласть("ПодвалСчета");
	ПараметрыПодвала = ОбластьПодвал.Параметры;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();


	
	
	// Функии для добавления факсимиле    			
    ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	НастроитьСтарыйВариантПодписиИПечати(ТабличныйДокумент, ОбъектыПечати, Ссылка.Организация, Ссылка);
	ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати, Ссылка.Организация, Ссылка);
	
	Возврат ТабличныйДокумент;
КонецФункции






#Область ЖелтойМагии 

// Проверить, нужно ли печатать макет.
// Функция предназначена для использования только внутри процедуры Печать.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - служебный параметр, переданный в процедуру Печать;
//  ИмяМакета             - Строка          - имя проверяемого макета.
//
// Возвращаемое значение:
//  Булево - Истина, если макет надо печатать.
//
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ") <> Неопределено;
	
КонецФункции

Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов) Экспорт
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		МетаданныеОбъекта = Объект.Метаданные();
		
		Если СтруктураТипов.Получить(МетаданныеОбъекта) = Неопределено Тогда
			
			МассивОбъектов = Новый Массив;
			СтруктураТипов.Вставить(МетаданныеОбъекта, МассивОбъектов);
			
		КонецЕсли;
		
		СтруктураТипов[МетаданныеОбъекта].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

// Возвращает менеджер объекта по ссылке на объект.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
// См. также ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект, менеджер которого требуется получить.
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОрганизацию);
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	
	ИмяОбъекта = Ссылка.Метаданные().Имя;
	ТипСсылки = ТипЗнч(Ссылка);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта];
		
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Устарела. Следует использовать ОбщегоНазначенияКлиент.СкопироватьРекурсивно или ОбщегоНазначения.СкопироватьРекурсивно
// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно, 
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов 
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  Источник - Структура
//           - Соответствие
//           - Массив
//           - СписокЗначений
//           - ТаблицаЗначений - объект, который необходимо 
//             скопировать.
//
// Возвращаемое значение:
//  Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;
#КонецЕсли	
	Если ТипИсточника = Тип("Структура") Тогда
		Приемник = СкопироватьСтруктуру(Источник);
	ИначеЕсли ТипИсточника = Тип("Соответствие") Тогда
		Приемник = СкопироватьСоответствие(Источник);
	ИначеЕсли ТипИсточника = Тип("Массив") Тогда
		Приемник = СкопироватьМассив(Источник);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = СкопироватьСписокЗначений(Источник);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

// Устарела. Следует использовать ОбщегоНазначенияКлиент.СкопироватьРекурсивно или ОбщегоНазначения.СкопироватьРекурсивно
// Создает копию значения типа Структура, рекурсивно, с учетом типов значений свойств. 
// Если свойства структуры содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СтруктураИсточник - Структура - копируемая структура.
// 
// Возвращаемое значение:
//  Структура - копия исходной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Устарела. Следует использовать ОбщегоНазначенияКлиент.СкопироватьРекурсивно или ОбщегоНазначения.СкопироватьРекурсивно
// Создает копию значения типа Соответствие, рекурсивно, с учетом типов значений.
// Если значения соответствия содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СоответствиеИсточник - Соответствие - соответствие, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Соответствие - копия исходного соответствия.
//
Функция СкопироватьСоответствие(СоответствиеИсточник) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СоответствиеРезультат;

КонецФункции

// Устарела. Следует использовать ОбщегоНазначенияКлиент.СкопироватьРекурсивно или ОбщегоНазначения.СкопироватьРекурсивно
// Создает копию значения типа Массив, рекурсивно, с учетом типов значений элементов массива.
// Если элементы массива содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  МассивИсточник - Массив - массив, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Массив - копия исходного массива.
//
Функция СкопироватьМассив(МассивИсточник) Экспорт
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент));
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

// Устарела. Следует использовать ОбщегоНазначенияКлиент.СкопироватьРекурсивно или ОбщегоНазначения.СкопироватьРекурсивно
// Создает копию значения типа СписокЗначений, рекурсивно, с учетом типов его значений.
// Если в списке значений есть значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СписокИсточник - СписокЗначений - список значений, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  СписокЗначений - копия исходного списка значений.
//
Функция СкопироватьСписокЗначений(СписокИсточник) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

// Устанавливает имя сохраняемого файла.
//
// Параметры:
//  МассивОбъектов - Массив - Массив объектов печати.
//  КоллекцияПечатныхФорм - Массив - Коллекция печатных форм.
//  ОбъектыПечати - Массив - Массив объектов печати.
//  ПараметрыВывода - Структура - Параметры вывода печатной формы.
//
Процедура ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати,
			ПараметрыВывода = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыВывода) = Тип("Структура") И ПараметрыВывода.Свойство("НеПереопределятьИмяФайла") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаПоВходящимНомерам = СвойствоСтруктуры(ПараметрыВывода, "ИмяФайлаПоВходящимНомерам", Ложь);
	
	УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм, ИмяФайлаПоВходящимНомерам);
	
КонецПроцедуры

 Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

// Процедура формирует имя сохраняемого файла путем формирования представления документа и удаления из него символов "точка"
Процедура УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм, ИмяФайлаПоВходящимНомерам)
	
	Если НЕ КоллекцияПечатныхФорм.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФорма = КоллекцияПечатныхФорм[0];
	Если ЗначениеЗаполнено(ПечатнаяФорма.ИмяФайлаПечатнойФормы) Тогда
		// Имя файла уже задано ранее, не меняем его.
		Возврат;
	КонецЕсли;
	
	ИмяФайлаПечатнойФормы = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		ПредставлениеДокументаДляПечатнойФормы = СформироватьЗаголовокПервичногоДокумента(
			ОбъектПечати.Значение, ПечатнаяФорма.СинонимМакета, ИмяФайлаПоВходящимНомерам);
			
		ПредставлениеДокументаДляПечатнойФормы = СтрЗаменить(ПредставлениеДокументаДляПечатнойФормы, ".", "");
		ИмяФайлаПечатнойФормы.Вставить(ОбъектПечати.Значение, ПредставлениеДокументаДляПечатнойФормы);
		
	КонецЦикла;
	
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
	
КонецПроцедуры

Функция СформироватьЗаголовокПервичногоДокумента(Документ, НазваниеДокумента, ИмяФайлаПоВходящимНомерам)
	
	РеквизитыДокумента = РегистрыСведений.ДанныеПервичныхДокументов.ДанныеПервичногоДокумента(Документ);
	
	НазваниеВЗаголовокДокумента = НазваниеДокумента;
	
	Если РеквизитыДокумента <> Неопределено Тогда
		
		Если ИмяФайлаПоВходящимНомерам = Ложь Тогда
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.НомерРегистратора, Истина, Ложь);
			ДатаДокумента = РеквизитыДокумента.ДатаРегистратора;
		Иначе
			ДатаДокумента  = ?(ЗначениеЗаполнено(РеквизитыДокумента.Дата),
				РеквизитыДокумента.Дата,
				РеквизитыДокумента.ДатаРегистратора);
				
			НомерНаПечать = РеквизитыДокумента.Номер;
			
			Если Не ЗначениеЗаполнено(РеквизитыДокумента.Номер) Тогда
				НомерНаПечать = НСтр("ru = 'бн'");
			КонецЕсли;
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НазваниеВЗаголовокДокумента) Тогда
			НазваниеВЗаголовокДокумента = Документ.Метаданные().Синоним;
		КонецЕсли;
		
	Иначе
		
		МетаданныеДокумента = Документ.Метаданные();
		
		ЕстьРеквизитНомер = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеДокумента.СтандартныеРеквизиты, "Номер");
		Если ЕстьРеквизитНомер Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Номер, Дата");
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Ложь);
		Иначе
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата");
			НомерНаПечать = НСтр("ru = 'бн'");
		КонецЕсли;
		
		ДатаДокумента = РеквизитыДокумента.Дата;
		
		Если Не ЗначениеЗаполнено(НазваниеВЗаголовокДокумента) Тогда
			НазваниеВЗаголовокДокумента = МетаданныеДокумента.Синоним;
		КонецЕсли;
		
	КонецЕсли;

	ЗаголовокДокумента = СтрШаблон(
		НСтр("ru = '%1 № %2 от %3 г.'"),
		НазваниеВЗаголовокДокумента,
		НомерНаПечать,
		Формат(ДатаДокумента, "ДФ='дд ММММ гггг'"));

	Возврат ЗаголовокДокумента;
	
КонецФункции

// Добавляет табличный документ в коллекцию печатных форм.
// Процедура предназначена для использования только внутри процедуры Печать.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - служебный параметр, переданный в процедуру Печать;
//  ИмяМакета             - Строка - имя макета;
//  СинонимМакета         - Строка - представление макета;
//  ТабличныйДокумент     - ТабличныйДокумент - печатная форма документа;
//  Картинка              - Картинка - пиктограмма печатной формы;
//  ПолныйПутьКМакету     - Строка - путь к макету в дереве метаданных, например
//                                   "Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ".
//                                   Если не указывать этот параметр, то редактирование макета пользователем будет
//                                   недоступно в форме ПечатьДокументов.
//  ИмяФайлаПечатнойФормы - Строка - имя, используемое при сохранении печатной формы в файл;
//                        - Соответствие из КлючИЗначение:
//                           * Ключ     - ЛюбаяСсылка - ссылка на объект печати;
//                           * Значение - Строка - имя файла.
//
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент,
	Картинка = Неопределено, ПолныйПутьКМакету = "", ИмяФайлаПечатнойФормы = Неопределено) Экспорт
	
	ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		ОписаниеПечатнойФормы.ТабличныйДокумент = ТабличныйДокумент;
		ОписаниеПечатнойФормы.СинонимМакета = СинонимМакета;
		ОписаниеПечатнойФормы.Картинка = Картинка;
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = ПолныйПутьКМакету;
		ОписаниеПечатнойФормы.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
	КонецЕсли;
	
КонецПроцедуры

// Задает область печати объекта в табличном документе. Необходимо использовать при выводе нескольких печатных форм
// в одном табличном документе для возможности печати комплектов документов, а также для возможности сохранения
// печатных форм в отдельных файлах.
// Необходимо вызывать после формирования каждой печатной формы в табличном документе.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//  НомерСтрокиНачало - Число - позиция начала очередной области в документе;
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  Ссылка - ЛюбаяСсылка - объект печати.
//
// Пример:
//  Пока ВыборкаПоДокументам.Следующий() Цикл
//    НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
//    // ... вывод печатной формы в табличный документ ...
//    УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
//  КонецЦикла;
//
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	//Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка)) Тогда
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru = 'Недопустимое значение параметра ""Ссылка"",
	//		|ожидалось значение ссылочного типа, передано значение: ""%1"" (тип %2)'"), Ссылка, ТипЗнч(Ссылка));
	//	Попытка // Такая конструкция нужна для проброса стека в журнал регистрации.
	//		ВызватьИсключение ТекстСообщения;
	//	Исключение
	//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , ,
	//			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	КонецПопытки;
	//	Возврат;
	//КонецЕсли;
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;
	
	Если Не НастройкиПечати().ИспользоватьПодписиИПечати Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		ЭтоПодписьИПечать = Ложь;
		Для Каждого ИмяОбластиСПодписьюИПечатью Из ПрефиксыИменОбластейСПодписьюИПечатью() Цикл
			Если СтрНайти(Рисунок.Имя, ИмяОбластиСПодписьюИПечатью) > 0 Тогда
				ЭтоПодписьИПечать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтоПодписьИПечать Тогда
			Продолжить;
		КонецЕсли;
		Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка И СтрНайти(Рисунок.Имя, "_Документ_") = 0 Тогда
			Рисунок.Имя = Рисунок.Имя + "_" + ИмяОбласти;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

 // Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ПриОпределенииНастроекПечати,
// определяющая наличие процедур подсистемы см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
// Параметры:
//  Настройки - Структура:
//   * ИспользоватьПодписиИПечати - Булево - при установке значения Ложь отключается возможность установки подписей 
//                                           и печатей в печатных формах.
//   * СкрыватьПодписиИПечатиДляРедактирования - Булево - удалять рисунки подписей и печатей табличных документов при
//                                           снятии флажка "Подписи и печати" в форме "Печать документов", для того,
//                                           чтобы они не мешали редактировать текст, находящийся под ними.
//   * ОбъектыПечати - Массив - менеджеры объектов с процедурой ПриОпределенииНастроекПечати 
//   * ПроверкаПроведенияПередПечатью    - Булево - признак необходимости проверки проведенности
//                                        документов перед печатью, является значением по умолчанию для команды печати
//                                        см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//                                        Для непроведенных документов команда печати не выполняется.
//                                        Если параметр не указан, то проверка проведенности не выполняется.
//
Функция НастройкиПечати() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИспользоватьПодписиИПечати", Истина);
	Настройки.Вставить("СкрыватьПодписиИПечатиДляРедактирования", Ложь);
	Настройки.Вставить("ОбъектыПечати", Новый Массив);
	Настройки.Вставить("ПроверкаПроведенияПередПечатью", Ложь);
	
	//ИнтеграцияПодсистемБСП.ПриОпределенииНастроекПечати(Настройки);
	//УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати(Настройки);
	
	Возврат Настройки;
	
КонецФункции

 Функция ПрефиксыИменОбластейСПодписьюИПечатью() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Печать");
	Результат.Добавить("Подпись");
	Результат.Добавить("Факсимиле");
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьСтарыйВариантПодписиИПечати(ТабличныйДокумент, ОбъектыПечати, Организация, ДокументПечатнойФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	СуффиксРисункаФаксимиле = СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы);
	
	ПодписиОрганизации = Справочники.Организации.ПодписиИПечатиОрганизации(Организация);
	Если ПодписиОрганизации.Свойство("ФаксимилеФаксимильнаяПечать") Тогда
		// Это старый вариант подписи, нужно удалить области ФаксимилеРуководитель, ФаксимилеГлавныйБухгалтер,
		// ФаксимилеПечать, ФаксимилеПредприниматель, ФаксимилеПечатьПредприниматель
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеРуководитель", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеГлавныйБухгалтер", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеПечать", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеПечатьПредприниматель", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеПредприниматель", СуффиксРисункаФаксимиле));
	Иначе
		// Старого варианта подписи нет, нужно удалить области ФаксимилеФаксимильнаяПечать, ФаксимилеФаксимильнаяПечатьПредприниматель
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеФаксимильнаяПечать", СуффиксРисункаФаксимиле));
		ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимилеФаксимильнаяПечатьПредприниматель", СуффиксРисункаФаксимиле));
	КонецЕсли;
	
	// Возможно, пользователь сохранил макет счета, и тогда у него останутся области ФаксимильнаяПечать и ФаксимильнаяПечатьПредприниматель
	// Они не заполнятся корректно, поэтому их нужно удалить в любом случае.
	ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимильнаяПечать", СуффиксРисункаФаксимиле));
	ОчиститьОбластьФаксимиле(ТабличныйДокумент, ИмяОбластиФаксимилеДокумента("ФаксимильнаяПечатьПредприниматель", СуффиксРисункаФаксимиле));
	
КонецПроцедуры

 Функция СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы)
	
	ДанныеОбласти = ОбъектыПечати.НайтиПоЗначению(ДокументПечатнойФормы);
	Возврат ДанныеОбласти.Представление;
	
КонецФункции

Функция ИмяОбластиФаксимилеДокумента(ИмяФаксимиле, СуффиксДокумента)
	Возврат СтрШаблон("%1_%2", ИмяФаксимиле, СуффиксДокумента)
КонецФункции

Процедура ОчиститьОбластьФаксимиле(ОбластьМакета, ИмяОбласти) Экспорт
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбласти);
	Если ОбластьФаксимиле <> Неопределено Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати, Организация, ДокументПечатнойФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОчиститьФаксимильнуюПодписьИПечатьИзМакета(ТабличныйДокумент, ОбъектыПечати, ДокументПечатнойФормы);
		Возврат;
	КонецЕсли;
	
	ОрганизацияЮридическоеЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	// В печатных формах могут быть несовместимые факсимиле.
	// Например, это может быть Руководитель и Предприниматель в счете-фактуре.
	// В зависимости от организации может выводится либо то, либо другое факсимиле.
	// Поэтому нужно доработать выведенный макет так, чтобы он содержал только нужные факсимиле.
	
	СуффиксРисункаФаксимиле = СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеРуководитель", "ФаксимилеПредприниматель", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеГлавныйБухгалтер", "ФаксимилеПредприниматель", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеРуководительСчетФактура", "ФаксимилеПредпринимательСчетФактура", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеГлавныйБухгалтерСчетФактура", "ФаксимилеПредпринимательСчетФактура", ОрганизацияЮридическоеЛицо);
	ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле,
		"ФаксимилеФаксимильнаяПечать", "ФаксимилеФаксимильнаяПечатьПредприниматель", ОрганизацияЮридическоеЛицо);
	
КонецПроцедуры

 Процедура ОчиститьФаксимильнуюПодписьИПечатьИзМакета(ТабличныйДокумент, ОбъектыПечати, ДокументПечатнойФормы) Экспорт
	
	// При печати документов за поставщика не нужно устанавливать факсимиле, т.к. это документ от имени другой организации.
	// Но т.к. макет для печати документов за поставщика используется тот же, что и для печати документов от имени организации,
	// то объекты факсимиле там есть. Выводить их не нужно, нужно удалить, чтобы механика БСП ее не видел и не заполнял.
	
	СуффиксРисункаФаксимиле = СуффиксРисункаФаксимиле(ОбъектыПечати, ДокументПечатнойФормы);
	
	ДлинаСуффиксаРисункаФаксимиле = СтрДлина(СуффиксРисункаФаксимиле);
	
	РисункиКУдалению = Новый Массив;
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		
		ИмяРисунка = Рисунок.Имя;
		
		Если ВРег(Прав(ИмяРисунка, ДлинаСуффиксаРисункаФаксимиле)) <> ВРег(СуффиксРисункаФаксимиле) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяПоказателя Из МассивИменПоказателей Цикл
			Если СтрНачинаетсяС(ВРег(ИмяРисунка), ВРег(ИмяПоказателя)) Тогда
				РисункиКУдалению.Добавить(Рисунок.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ИмяРисунка Из РисункиКУдалению Цикл
		ТабличныйДокумент.Рисунки.Удалить(ИмяРисунка);
	КонецЦикла;
	
КонецПроцедуры    

Процедура ОчиститьНесовместимыеФаксимиле(ТабличныйДокумент, СуффиксРисункаФаксимиле, ИмяОсновногоФаксимиле, ИмяДублирующегоФаксимиле, ИспользоватьОсновноеФаксимиле)
	
	ИмяДублирующегоРисункаФаксимиле = ИмяОбластиФаксимилеДокумента(ИмяДублирующегоФаксимиле, СуффиксРисункаФаксимиле);
	ИмяОсновногоРисункаФаксимиле = ИмяОбластиФаксимилеДокумента(ИмяОсновногоФаксимиле, СуффиксРисункаФаксимиле);
	
	ОбластьДублирующегоФаксимиле = ТабличныйДокумент.Области.Найти(ИмяДублирующегоРисункаФаксимиле);
	Если ОбластьДублирующегоФаксимиле = Неопределено Тогда
		// Дублирования факсимиле нет, поэтому и делать ничего не нужно.
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьОсновноеФаксимиле Тогда
		ТабличныйДокумент.Рисунки.Удалить(ОбластьДублирующегоФаксимиле.Имя);
	Иначе
		ОбластьОсновногоФаксимиле = ТабличныйДокумент.Области.Найти(ИмяОсновногоРисункаФаксимиле);
		Если ОбластьОсновногоФаксимиле <> Неопределено Тогда
			ТабличныйДокумент.Рисунки.Удалить(ОбластьОсновногоФаксимиле.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

Функция МассивИменПоказателейФаксимиле()
	
	МассивИменПоказателей = Новый Массив;
	МассивИменПоказателей.Добавить("ФаксимилеПечать");
	МассивИменПоказателей.Добавить("ФаксимилеПечатьПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководитель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительСчетФактура");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительНакладная");
	МассивИменПоказателей.Добавить("ФаксимилеПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеПредпринимательСчетФактура");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтер");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтерСчетФактура");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформление");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформлениеУПД");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформлениеУКД");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнитель");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщик");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщикУПД");
	МассивИменПоказателей.Добавить("ФаксимилеДоверенноеЛицо");
	// для совместимости - подвал Счета
	МассивИменПоказателей.Добавить("ФаксимилеФаксимильнаяПечать");
	МассивИменПоказателей.Добавить("ФаксимилеФаксимильнаяПечатьПредприниматель");
	
	Возврат МассивИменПоказателей;
	
КонецФункции


#КонецОбласти




















































